Shader "Unlit/#NAME#"
{
	Properties
	{
		_MainTex("Texture", 2D) = "white" {}
		_Color("Color", Color) = (0,0,0,0)
	}

	SubShader
	{
		Blend DstColor Zero
		ZWrite Off
		ZTest Always
		Cull Back

	Tags
	{
		"RenderType" = "Transparent"
		"Queue" = "Transparent"
	}

	Pass
	{
		CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag

			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;
				float4 projPos : TEXCOORD1; //Screen position of vertex
				float4 vertex : SV_POSITION;
				float depth : DEPTH;
			};

			sampler2D _MainTex;
			float4 _MainTex_ST;

			v2f vert(appdata v)
			{
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				o.uv = TRANSFORM_TEX(v.uv, _MainTex);
				o.projPos = ComputeScreenPos(o.vertex);
				o.depth = -mul(UNITY_MATRIX_MV, v.vertex).z *_ProjectionParams.w;
				return o;
			}

			sampler2D _CameraDepthNormalsTexture;
			fixed4 _Color;

			fixed4 frag(v2f i) : SV_Target
			{
				float screenDepth = DecodeFloatRG(tex2D(_CameraDepthNormalsTexture, i.projPos.xy / i.projPos.w).zw);
				float diff = (screenDepth - i.depth);
				fixed4 mainCol = tex2D(_MainTex, i.uv);
				float intersect = max(0, 1 - smoothstep(0, _ProjectionParams.w * 0.5, diff));
				return 1-(intersect * _Color * mainCol);
			}
		ENDCG
		}
	}
}
