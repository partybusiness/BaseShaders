Shader "Unlit/#NAME#"
{
// This is a demo of how to use instanced properties
// Instead of rendering in the usual fashion, you can call Graphics.DrawMeshInstance() and pass an array of properties
// https://docs.unity3d.com/ScriptReference/Graphics.DrawMeshInstanced.html
// The script for this one looks something like this:
// properties = new MaterialPropertyBlock();
// properties.SetVectorArray("_Color", colours); // where colours is an array of colours
// and then in an Update function:
// Graphics.DrawMeshInstanced(mesh, 0, material, matrices, properties);

	Properties
	{
		[PerRendererData]_Color ("Color", Color) = (1,1,1,1)
	}
	SubShader
	{
		Tags { "RenderType"="Opaque" }
		LOD 100

		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			
			#pragma multi_compile_instancing
			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f
			{
				float4 vertex : SV_POSITION;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
		
			UNITY_INSTANCING_CBUFFER_START(InstanceProperties)
			UNITY_DEFINE_INSTANCED_PROP(fixed4, _Color)
			UNITY_INSTANCING_CBUFFER_END

			v2f vert (appdata v)
			{
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				return o;
			}
			
			fixed4 frag (v2f i) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(i);
				fixed4 col = UNITY_ACCESS_INSTANCED_PROP(_Color);
				return col;
			}
			ENDCG
		}
	}
}
