Shader "Unlit/#NAME#"
{
// This works in combination with 100-Shader__MaskHoleReceiver using the stencil buffer
// This one writes to the stencil buffer, and then the receiver will have holes in it wherever this one was rendered
	Properties
	{
		_MainTex ("Texture", 2D) = "white" {}
	}
	SubShader
	{
		Tags { 
			"RenderType"="Transparent"
			"Queue" = "Geometry"
		}
		LOD 100
		ColorMask 0
		ZWrite Off

		//the number 1 can be changed if it matches in the hole receiver
		//maybe different shaders will use a different number
		Stencil{
			Ref 1
			Comp always
			Pass replace
		}

		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			
			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;
				float4 vertex : SV_POSITION;
			};

			sampler2D _MainTex;
			float4 _MainTex_ST;
			
			v2f vert (appdata v)
			{
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				o.uv = TRANSFORM_TEX(v.uv, _MainTex);
				return o;
			}
			
			fixed4 frag (v2f i) : SV_Target
			{
				fixed4 col = tex2D(_MainTex, i.uv);
				clip(col.a - 0.5); //uses alpha cut-off 
				return col;
			}
			ENDCG
		}
	}
	FallBack "Particles/Multiply"
}
